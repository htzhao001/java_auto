# 这里三个变量，第一个为日志优先级，后两个可以自定义，与下边所应用地方对应即可
# 新的logging等级有变化对应关系如下
# ERROR    :    SEVERE
# WARN     :    WARNING
# INFO     :    INFO, CONFIG
# DEBUG    :    FINE, FINER
# TRACE    :    FINEST
log4j.rootLogger=FINER, stdout, logfile


# 配置日志输出目的地，ConsoleAppender为控制台输出
lof4j.appender.stdout=org.apache.log4j.ConsoleAppender
# 设置格式
log4j.appender.stdout.encoding = UTF-8
# 默认System.out输出到控制台
log4j.appender.stdout.Target = System.out
# 输出级别设置
log4j.appender.stdout.Threshold = INFO
# 设置日志内容显示格式
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
# 格式：时间{年月日时分秒} 日志级别 该日志产生的线程名 [日志所在类全名]  日志产生行数 具体日志信息 换行符
log4j.appender.stdout.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:SSS} %p %t [%c]%M(line:%L)%m%n

# 配置日志输出目的地，FileAppender为日志文件输出
lof4j.appender.logfile=org.apache.log4j.FileAppender
# 设置格式
log4j.appender.logfile.encoding = UTF-8
# 设置日志存放路径
log4j.appender.logfile.File = \\logs\\test.log
# 输出级别设置
log4j.appender.logfile.Threshold = FINER
# 设置日志内容显示格式
log4j.appender.logfile.layout = org.apache.log4j.PatternLayout
# 格式：时间{年月日时分秒} 日志级别 该日志产生的线程名 [日志所在类全名]  日志产生行数 具体日志信息 换行符
log4j.appender.logfile.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:SSS} %p %t [%c]%M(line:%L)%m%n